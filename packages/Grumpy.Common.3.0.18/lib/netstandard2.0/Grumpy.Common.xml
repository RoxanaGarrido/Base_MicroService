<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Grumpy.Common</name>
    </assembly>
    <members>
        <member name="T:Grumpy.Common.AssemblyInformation">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.AssemblyInformation.Description">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.AssemblyInformation.Title">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.AssemblyInformation.Version">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.AssemblyInformation.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.AssemblyInformation.#ctor(System.Reflection.Assembly)">
            <inheritdoc />
        </member>
        <member name="T:Grumpy.Common.Exceptions.InvalidFormatException">
            <inheritdoc />
            <summary>
            Invalid format exception
            </summary>
        </member>
        <member name="M:Grumpy.Common.Exceptions.InvalidFormatException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            The format is not supported
            </summary>
            <param name="field"></param>
        </member>
        <member name="T:Grumpy.Common.Exceptions.MethodNotImplementedException">
            <inheritdoc />
            <summary>
            Method not Implemented
            </summary>
        </member>
        <member name="M:Grumpy.Common.Exceptions.MethodNotImplementedException.#ctor(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Grumpy.Common.Extensions.ObjectExtensions">
            <summary>
            Extension method for the generic object.
            </summary>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.SerializeToXml``1(``0)">
            <summary>
            Returns xml string of serialize an object.
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="obj">The object to serialize to a string</param>
            <returns>The string representation of object</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.SerializeToXml``1(``0,System.Boolean)">
            <summary>
            Serialize an object to a xml string.
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="obj">The object to serialize to a string</param>
            <param name="formatXml">Should the XML be formatted</param>
            <returns>The string representation of object</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.SerializeToXml``1(``0,System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.XmlWriterSettings)">
            <summary>
            Serialize an object to a xml string.
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="obj">The object to serialize to a string</param>
            <param name="xmlSerializerNamespaces">XML Namespaces</param>
            <param name="xmlWriterSettings">XML Serializer Settings</param>
            <returns>The string representation of object</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.IsNull``1(``0)">
            <summary>
            Indicate if the object is null.
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="obj">The object</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.In``1(``0,``0[])">
            <summary>
            Check if the object is in one of multiple values.
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="item">The object</param>
            <param name="items">Possible values</param>
            <returns></returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.Between``1(``0,``0,``0)">
            <summary>
            Check if the value of on object is between two values (Inclusive).
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="item">The object</param>
            <param name="start">Lower value</param>
            <param name="end">Upper value</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.BetweenExclusive``1(``0,``0,``0)">
            <summary>
            Check if the value of on object is between two values (Exclusive).
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="item">The object</param>
            <param name="start">Lower value</param>
            <param name="end">Upper value</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.AsEnumerable``1(``0)">
            <summary>
            Return any object as IEnumerable.
            </summary>
            <typeparam name="T">The type of an object</typeparam>
            <param name="item">The object</param>
            <returns>One occurrence of the object as Enumerable</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.IsNumber(System.Object)">
            <summary>
            Indicate it an object is a number
            </summary>
            <param name="value">This object</param>
            <returns>True = Object is a number (int, long etc)</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invoke method using reflection, this call also invoke private methods
            </summary>
            <param name="obj">This object</param>
            <param name="methodName">Name of Method</param>
            <param name="parameters">List of parameters</param>
            <returns>Return object</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.ObjectExtensions.Clone``1(``0)">
            <summary>
            Deep clone an object, copy all data. Object need to be serializable
            </summary>
            <param name="source">Source object</param>
            <typeparam name="T">Type of object</typeparam>
            <returns>Result object</returns>
        </member>
        <member name="T:Grumpy.Common.Extensions.StringExtensions">
            <summary>
            Extension method for the string
            </summary>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.DeserializeFromXml``1(System.String)">
            <summary>
            Creates an object from serialized xml string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The xml string</param>
            <returns>The object</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.NullOrEmpty(System.String)">
            <summary>
            Indicate whether the string is null or an empty string.
            </summary>
            <param name="value">Input string</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.NullOrWhiteSpace(System.String)">
            <summary>
            Indicate whether the string is null, an empty string or only contain white spaces.
            </summary>
            <param name="value">This string</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToStream(System.String)">
            <summary>
            Converts string to stream, make sure stream is closed after it's been used.
            </summary>
            <param name="value">This string</param>
            <returns>The stream</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.StartWith(System.String,System.String)">
            <summary>
            Make sure that a string starts with a specific string, adding the prefix if not already at the beginning.
            </summary>
            <param name="value">This string</param>
            <param name="start">Prefix string</param>
            <returns>Result string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.EndWith(System.String,System.String)">
            <summary>
            Make sure that a string ends with a specific string, adding the suffix if not already at the end.
            </summary>
            <param name="value">This string</param>
            <param name="end">Suffix string</param>
            <returns>Result string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.Less(System.String,System.String)">
            <summary>
            Compare this string with another and return true is this string is the smallest/first.
            </summary>
            <param name="value">This string</param>
            <param name="other">Another string</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.Greater(System.String,System.String)">
            <summary>
            Compare this string with another and return true is this string is the largest/last.
            </summary>
            <param name="value">This string</param>
            <param name="other">Another string</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.LessOrEqual(System.String,System.String)">
            <summary>
            Compare this string with another and return true is this string is the smallest/first or equal.
            </summary>
            <param name="value">This string</param>
            <param name="other">Another string</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.GreaterOrEqual(System.String,System.String)">
            <summary>
            Compare this string with another and return true is this string is the largest/last or equal.
            </summary>
            <param name="value">This string</param>
            <param name="other">Another string</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.StartsWith(System.String,System.String[])">
            <summary>
            Indicates whether this string starts with any of multiple strings.
            </summary>
            <param name="value">This string</param>
            <param name="strings">Possible strings</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ContainsAnyOf(System.String,System.Char[])">
            <summary>
            Indicates whether this string contains any of a set of characters.
            </summary>
            <param name="value">This string</param>
            <param name="characters">Characters to be contained</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ContainsAllOf(System.String,System.Char[])">
            <summary>
            Indicates whether this string contains all of a set of characters.
            </summary>
            <param name="value">This string</param>
            <param name="characters">Characters to be contained</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ContainsAnyOf(System.String,System.String[])">
            <summary>
            Indicates whether this string contains any of a list of strings.
            </summary>
            <param name="value">This string</param>
            <param name="strings">Strings to be contained</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ContainsAllOf(System.String,System.String[])">
            <summary>
            Indicates whether this string contains all of list of strings.
            </summary>
            <param name="value">This string</param>
            <param name="strings">Strings to be contained</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.To``1(System.String,System.IFormatProvider)">
            <summary>
            Type cast this string to an object of another type.
            </summary>
            <typeparam name="T">Type of result object</typeparam>
            <param name="value">This string</param>
            <param name="formatProvider">Specific format provider, default using invariant</param>
            <returns>Result object</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.To(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Type cast this string to an object of another type.
            </summary>
            <param name="value">This string</param>
            <param name="type">Type of result object</param>
            <param name="formatProvider">Specific format provider, default using invariant</param>
            <returns>Result object</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.AsRegex(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Returns the string as a Regex object.
            </summary>
            <param name="value">This string</param>
            <param name="regexOptions">Regular expression option</param>
            <returns>Regular expression</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.MatchesRegex(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Indicates if the string matches a specified regular expression.
            </summary>
            <param name="value">This string</param>
            <param name="regEx">Regular expression</param>
            <param name="regexOptions">Regular expression option for IsMatch</param>
            <returns>True/false</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            Returns the left part of the string.
            </summary>
            <param name="value">This string</param>
            <param name="length">Number of characters to extract</param>
            <returns>Result string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns the right part of the string.
            </summary>
            <param name="value">This value</param>
            <param name="length">Number of characters to extract</param>
            <returns>Result string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.SplitWithEscape(System.String,System.Char,System.Char)">
            <summary>
            Split the string in to a list (IEnumerable) of strings, using a specific separator and escape character. 
            </summary>
            <param name="value">This string</param>
            <param name="separator">Separation character</param>
            <param name="escapeCharacter">Escape character</param>
            <returns>List of strings</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ReplaceAnyOf(System.String,System.String,System.String)">
            <summary>
            Returns a string where any of a set of characters are replaced with a specific character.
            </summary>
            <param name="value">This string</param>
            <param name="charactersToReplace">List of characters to replace</param>
            <param name="withCharacter">Character to replace with</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.Escape(System.String,System.String,System.Char)">
            <summary>
            Returns the string where specific characters are escaped.
            </summary>
            <param name="value">This string</param>
            <param name="charactersToEscape">List of characters to escape</param>
            <param name="escapeCharacter">Escape character</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.Quotify(System.String,System.String,System.String)">
            <summary>
            Returns the string with quotes if needed (When there blank characters or quotes).
            </summary>
            <param name="value">This string</param>
            <param name="quote">String to us as quote</param>
            <param name="blank">String to consider as blank character</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.IndexOfNth(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Find a specific occurrence of a string with in this string and return the position, if not found returns -1.
            </summary>
            <param name="value">This string</param>
            <param name="searchFor">Search for value</param>
            <param name="nth">Search for the specified occurrence of the search for value</param>
            <param name="startIndex">Start search at index</param>
            <returns>Index of the search for value</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToSeconds(System.String)">
            <summary>
            Returns number of seconds in a string formatted timestamp.
            </summary>
            <param name="value">String containing a timestamp</param>
            <returns>Seconds as a interger value</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToTimeSpan(System.String)">
            <summary>
            Returns time span in a string formatted timestamp.
            </summary>
            <param name="value">String containing a timestamp</param>
            <returns>Timestamp as time span</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToMilliseconds(System.String)">
            <summary>
            Returns number of milliseconds in a string formatted timestamp.
            </summary>
            <param name="value">String containing a timestamp</param>
            <returns>Milliseconds as an integer value</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToProperName(System.String)">
            <summary>
            Returns a copy of the string with proper case for a name, lower case except for first letter of each word and after hyphen (-). Also known as ToNameCase.
            </summary>
            <param name="value">This string</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToProperName(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns a copy of the string with proper case for a name, lower case except for first letter of each word and after hyphen (-). Also known as ToNameCase.
            </summary>
            <param name="value">This string</param>
            <param name="cultureInfo">Specific culture information</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToProperParagraph(System.String)">
            <summary>
            Returns a copy of the string with proper case for a paragraph, lower case except for first letter of each paragraph (.). This implementation is only tested with Danish, Swedish and Norwegian characters. Also known as ConvertStringToLowerSpecial.
            char after '. ' is to uppercase also.
            </summary>
            <param name="value">This string</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToUpperFirstCharacter(System.String)">
            <summary>
            Returns a copy of the string with first character in upper case. This implementation is only tested with Danish, Swedish and Norwegian characters. Also known as UpperCaseFirstCharacter.
            </summary>
            <param name="value">This string</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToProperFirst(System.String)">
            <summary>
            Returns a copy of the string with proper case, all lower case except for the very first character (This is upper case). This implementation is only tested with Danish, Swedish and Norwegian characters. Also known as ToLowerAndUpperCaseFirstCharacter.
            </summary>
            <param name="value">This string</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Grumpy.Common.Extensions.StringExtensions.ToProper(System.String)">
            <summary>
            Returns a copy of the string converted to proper case, first letter of each word upper case rest lower case. This implementation is only tested with Danish, Swedish and Norwegian characters. Also known as ToLowerAndUpperCaseFirstCharacterInEachWord.
            </summary>
            <param name="value">This string</param>
            <returns>Converted string</returns>
        </member>
        <member name="T:Grumpy.Common.Extensions.WaitHandleExtensions">
            <summary>
            Extensions method for WaitHandle
            </summary>
        </member>
        <member name="M:Grumpy.Common.Extensions.WaitHandleExtensions.ToTask(System.Threading.WaitHandle,System.Threading.CancellationToken)">
            <summary>
            Type case a Wait Handle to a task to be use for asynchronous programming
            </summary>
            <param name="handle">Wait handle</param>
            <param name="cancellationToken">Cancellation Token</param>
            <returns>Task</returns>
        </member>
        <member name="T:Grumpy.Common.Interfaces.IAssemblyInformation">
            <summary>
            Assembly Information
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IAssemblyInformation.Description">
            <summary>
            Assembly Description
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IAssemblyInformation.Title">
            <summary>
            Assembly Title
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IAssemblyInformation.Version">
            <summary>
            Assembly Version
            </summary>
        </member>
        <member name="T:Grumpy.Common.Interfaces.IProcessInformation">
            <summary>
            Get information about the current process and session
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.ApplicationName">
            <summary>
            Application Name
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.DomainName">
            <summary>
            Logon Domain Name
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.Id">
            <summary>
            Process Id
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.InitialProgram">
            <summary>
            Initial Program
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.MachineName">
            <summary>
            Machine Name
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.UserName">
            <summary>
            User Name
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.WorkingDirectory">
            <summary>
            Working Directory
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessInformation.ProcessName">
            <summary>
            Process Name
            </summary>
        </member>
        <member name="T:Grumpy.Common.Interfaces.IProcessor">
            <summary>
            Processor information
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.IProcessor.RunCycle">
            <summary>
            Get run cycle number
            </summary>
            <returns></returns>
        </member>
        <member name="T:Grumpy.Common.Interfaces.ITask">
            <inheritdoc />
            <summary>
            Async Task - This can be used in classes that need a task and need to be able to stub this in unit test cases
            </summary>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITask.Start(System.Action)">
            <summary>
            StartSync the Task
            </summary>
            <param name="action">Action to execute in Task</param>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITask.Start(System.Action,System.Threading.CancellationToken)">
            <summary>
            Start the Task
            </summary>
            <param name="action">Action to execute in Task</param>
            <param name="cancellationToken">Cancellation Token</param>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITask.Start(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Start the Task
            </summary>
            <param name="action">Action to execute in Task</param>
            <param name="state">Input state/object</param>
            <param name="cancellationToken">Cancellation Token</param>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITask.Wait">
            <summary>
            Wait for Task for complete
            </summary>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITask.Stop">
            <summary>
            Stop the Task
            </summary>
        </member>
        <member name="P:Grumpy.Common.Interfaces.ITask.IsCompleted">
            <summary>
            Indicate if the task ran to completion
            </summary>
            <returns></returns>
        </member>
        <member name="P:Grumpy.Common.Interfaces.ITask.IsFaulted">
            <summary>
            Indicate if the task failed
            </summary>
            <returns></returns>
        </member>
        <member name="P:Grumpy.Common.Interfaces.ITask.AsyncState">
            <summary>
            State/Input object of the task
            </summary>
            <returns></returns>
        </member>
        <member name="P:Grumpy.Common.Interfaces.ITask.Exception">
            <summary>
            Return the Exception of failed task 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Grumpy.Common.Interfaces.ITaskFactory">
            <summary>
            Async Task Factory - This can be used in classes that need a task and need to be able to stub this in unit test cases
            </summary>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITaskFactory.Create">
            <summary>
            Create a Task 
            </summary>
            <returns>The Task</returns>
        </member>
        <member name="T:Grumpy.Common.Interfaces.ITimerTask">
            <inheritdoc />
            <summary>
            Timer Task for running a task at intervals
            </summary>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITimerTask.Start(System.Action,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Start the Timer task
            </summary>
            <param name="action">Action to execute at intervals</param>
            <param name="millisecondsIntervals">Execution interval in Milliseconds</param>
            <param name="cancellationToken">Cancellation Token</param>
        </member>
        <member name="M:Grumpy.Common.Interfaces.ITimerTask.Stop">
            <summary>
            Stop the timer task
            </summary>
        </member>
        <member name="T:Grumpy.Common.Interfaces.IUniqueKey">
            <summary>
            Generate unique key, this uses Guid in the default implementation, but use class to be able to stub out in test scenarios.
            </summary>
        </member>
        <member name="M:Grumpy.Common.Interfaces.IUniqueKey.Generate">
            <summary>
            Generate Unique Key
            </summary>
            <returns>Key</returns>
        </member>
        <member name="T:Grumpy.Common.ProcessInformation">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.MachineName">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.UserName">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.DomainName">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.WorkingDirectory">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.ApplicationName">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.InitialProgram">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.ProcessName">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.ProcessInformation.Id">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.ProcessInformation.#ctor">
            <inheritdoc />
        </member>
        <member name="T:Grumpy.Common.Processor">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.Processor.RunCycle">
            <inheritdoc />
        </member>
        <member name="T:Grumpy.Common.ProcessorRunCycle.ProcessorRunCycleImplementation">
            <summary>
            Static implementation of the Processor Timestamp Assembler function
            
            Implementation inspired by:
            https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/ia-32-ia-64-benchmark-code-execution-paper.pdf
            https://software.intel.com/en-us/articles/introduction-to-x64-assembly/
            https://blog.quiscalusmexicanus.org/
            https://www.codeproject.com/Members/Nicolai-Nyberg
            </summary>
        </member>
        <member name="T:Grumpy.Common.Threading.Task">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.#ctor(System.Threading.Tasks.TaskFactory)">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.Start(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.Start(System.Action,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.Start(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.Stop">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.Wait">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.Threading.Task.IsCompleted">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.Threading.Task.IsFaulted">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.Threading.Task.AsyncState">
            <inheritdoc />
        </member>
        <member name="P:Grumpy.Common.Threading.Task.Exception">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.Task.Dispose(System.Boolean)">
            <summary>
            Dispose locale objects
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Grumpy.Common.Threading.TaskFactory">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.TaskFactory.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.TaskFactory.Create">
            <inheritdoc />
        </member>
        <member name="T:Grumpy.Common.Threading.TimerTask">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.TimerTask.Start(System.Action,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.TimerTask.Stop">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.TimerTask.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.Threading.TimerTask.Dispose(System.Boolean)">
            <summary>
            Dispose locale objects
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Grumpy.Common.Threading.TimerUtility">
            <summary>
            Timer utilities - Intended to use in test cases
            </summary>
        </member>
        <member name="M:Grumpy.Common.Threading.TimerUtility.WaitForIt(System.Func{System.Boolean},System.Int32)">
            <summary>
            Wait fon an delegate function to return true. Suggest that you use inline function like TimerUtility.WaitForIt(() => 3 > ++i, 1000)
            </summary>
            <param name="expression">Call back expression function, e.g. () => 3 > ++i</param>
            <param name="millisecondsTimeout">Timeout in milliseconds</param>
            <returns>True is expired and false is Timeout</returns>
        </member>
        <member name="M:Grumpy.Common.Threading.TimerUtility.WaitForIt(System.Func{System.Boolean})">
            <summary>
            Wait fon an delegate function to return true. This might cause infinity look, use overload with timeout.
            </summary>
            <param name="expression">Call back expression function, e.g. () => 3 > ++i</param>
        </member>
        <member name="T:Grumpy.Common.UniqueKey">
            <inheritdoc />
        </member>
        <member name="M:Grumpy.Common.UniqueKey.Generate">
            <inheritdoc />
        </member>
        <member name="T:Grumpy.Common.UniqueKeyUtility">
            <summary>
            Utility Class for Unique Key
            </summary>
        </member>
        <member name="M:Grumpy.Common.UniqueKeyUtility.Generate">
            <summary>
            Generate unique key
            </summary>
            <returns>Key</returns>
        </member>
    </members>
</doc>
